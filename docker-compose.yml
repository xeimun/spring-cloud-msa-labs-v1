version: '3.8'

services:
  # ===========================================
  # Infrastructure Services
  # ===========================================

  mysql:
    image: mysql:8.0
    container_name: msa-mysql
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./backend/infra/mysql/init:/docker-entrypoint-initdb.d
    environment:
      MYSQL_ROOT_PASSWORD: 123qwe
      MYSQL_ALLOW_EMPTY_PASSWORD: "no"
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
    networks:
      - msa-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  rabbitmq:
    image: rabbitmq:3-management
    container_name: msa-rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - msa-network
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: msa-zipkin
    ports:
      - "9411:9411"
    networks:
      - msa-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9411/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ===========================================
  # Configuration & Service Discovery
  # ===========================================

  config-server:
    build:
      context: ./backend/config-server
      dockerfile: Dockerfile
    container_name: msa-config-server
    ports:
      - "8888:8888"
    volumes:
      - ./backend/config-repo:/config-repo
    environment:
      - SPRING_PROFILES_ACTIVE=native
    networks:
      - msa-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  eureka-server:
    build:
      context: ./backend/eureka-server
      dockerfile: Dockerfile
    container_name: msa-eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_APPLICATION_NAME=eureka-server
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    networks:
      - msa-network
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  # ===========================================
  # Core Microservices
  # ===========================================

  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: msa-user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_APPLICATION_NAME=user-service
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/user_service_db
    networks:
      - msa-network
    depends_on:
      mysql:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  product-service:
    build:
      context: ./backend/product-service
      dockerfile: Dockerfile
    container_name: msa-product-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_APPLICATION_NAME=product-service
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/product_service_db

    networks:
      - msa-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  order-service:
    build:
      context: ./backend/order-service
      dockerfile: Dockerfile
    container_name: msa-order-service
    ports:
      - "8083:8083"
    environment:
      - SPRING_APPLICATION_NAME=order-service
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/order_service_db
    networks:
      - msa-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8083/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  payment-service:
    build:
      context: ./backend/payment-service
      dockerfile: Dockerfile
    container_name: msa-payment-service
    ports:
      - "8085:8085"
    environment:
      - SPRING_APPLICATION_NAME=payment-service
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/payment_service_db
    networks:
      - msa-network
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8085/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  notification-service:
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile
    container_name: msa-notification-service
    ports:
      - "8084:8084"
    environment:
      - SPRING_APPLICATION_NAME=notification-service
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    networks:
      - msa-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8084/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # ===========================================
  # API Gateway
  # ===========================================

  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: msa-api-gateway
    ports:
      - "8080:8080"
    environment:
      - SPRING_APPLICATION_NAME=api-gateway
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    networks:
      - msa-network
    depends_on:
      config-server:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      user-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

# ===========================================
# Networks and Volumes
# ===========================================

networks:
  msa-network:
    driver: bridge
    name: msa-network

volumes:
  mysql-data:
    name: msa-mysql-data
  rabbitmq-data:
    name: msa-rabbitmq-data
